#!/usr/bin/env python3

from collections.abc import Iterable

class SubConfig():
  defaults = None
  baseKey = None
  def __init__(self, config):
    #######################
    # renew config defaults
    #######################
    config.renew(self.defaults, self.baseKey)
    self.__config = config
    self._table = {}

  def initCsh(self):
    return ['''#!/bin/csh -f
######################################################
# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY.
# MODIFY THE SCENARIO YAML FILE INSTEAD.
######################################################

if ( $?config_'''+self.baseKey+''' ) exit 0
set config_'''+self.baseKey+''' = 1

''']
  def get(self, v):
    return self._table[v]

  def set(self, v, value):
    self._table[v] = value

  def setOrDie(self, v):
    self._table[v] = self.__config.getOrDie(v)

  def setOrDefault(self, v, default):
    self._table[v] = self.__config.getOrDefault(v, default)

  @staticmethod
  def varToCsh(var, value):
    if isinstance(value, Iterable) and not isinstance(value, str):
      vsh = str(value)
      vsh = vsh.replace('\'','')
      vsh = vsh.replace('[','')
      vsh = vsh.replace(']','')
      vsh = vsh.replace(',',' ')
      return ['set '+var+' = ('+vsh+')\n']
    else:
      return ['setenv '+var+' "'+str(value)+'"\n']

  @staticmethod
  def varToCylc(var, value):
    if isinstance(value, str):
      return ['{% set '+var+' = "'+value+'" %}\n']
    else:
      return ['{% set '+var+' = '+str(value)+' %}\n']

  @staticmethod
  def write(filename, Str):
     print('Creating '+filename)
     with open(filename, 'w') as f:
       f.writelines(Str)
       f.close()

