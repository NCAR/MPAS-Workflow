#!/usr/bin/env python3

from collections.abc import Iterable

class SubConfig():
  defaults = None
  baseKey = None
  requiredVariables = {}
  optionalVariables = {}
  variablesWithDefaults = {}
  def __init__(self, config):
    self.logPrefix = self.__class__.__name__+': '

    #######################
    # renew config defaults
    #######################
    config.renew(self.defaults, self.baseKey)
    self.__config = config
    self._vtable = {}

    ##############
    # parse config
    ##############
    for v, t in self.requiredVariables.items():
      self._setOrDie(v, t)

    for v, t in self.optionalVariables.items():
      self._setOrNone(v, t)

    for v, a in self.variablesWithDefaults.items():
      self._setOrDefault(v, a[0], a[1])

  def _msg(self, text):
    return self.logPrefix+text

  def get(self, v):
    'basic _vtable get method'
    return self._vtable[v]

  def _set(self, v, value):
    'basic _vtable set method'
    self._vtable[v] = value

  ## methods for setting _vtable values from self.__config
  def _setOrDie(self, v, t=None, vout=None):
    v_ = vout
    if v_ is None: v_ = v

    self._vtable[v_] = self.__config.getOrDie(v)
    if t is not None:
      self._vtable[v_] = t(self._vtable[v_])

  def _setOrNone(self, v, t=None, vout=None):
    v_ = vout
    if v_ is None: v_ = v

    self._vtable[v_] = self.__config.get(v)
    if self._vtable[v_] is not None and t is not None:
      self._vtable[v_] = t(self._vtable[v_])

  def _setOrDefault(self, v, default, t=None, vout=None):
    v_ = vout
    if v_ is None: v_ = v

    self._vtable[v_] = self.__config.getOrDefault(v, default)
    if t is not None:
      self._vtable[v_] = t(self._vtable[v_])

  ## general purpose nested extract methods
  def extractResource(self, resource1, resource2, key, t=None):
    if resource1 is None:
      r1 = ''
    else:
      r1 = resource1

    if resource2 is None:
      r2 = ''
    else:
      r2 = resource2

    value = self.__config.get('.'.join([r1, r2, key]))

    if value is None:
      value = self.__config.get('.'.join([r1, key]))

    if value is None:
      value = self.__config.get('.'.join([r1, 'common', key]))

    if value is None:
      value = self.__config.get('.'.join([r1, 'defaults', key]))

    if value is None:
      value = self.__config.get('.'.join(['defaults', key]))

    if t is not None and value is not None:
      return t(value)
    else:
      return value

  def extractResourceOrDie(self, r1, r2, key, t=None):
    v = self.extractResource(r1, r2, key, t)
    assert v is not None, (r1+', '+r2+', '+key+' targets invalid or nonexistent node')
    return v

  def extractResourceOrDefault(self, r1, r2, key, default, t=None):
    v = self.extractResource(r1, r2, key, t)
    if v is None:
      v = default
    return v

  ## export methods
  @staticmethod
  def write(filename, Str):
     if len(Str) == 0: return
     #self._msg('Creating '+filename)
     with open(filename, 'w') as f:
       f.writelines(Str)
       f.close()

  # csh variables
  @staticmethod
  def varToCsh(var, value):
    if isinstance(value, Iterable) and not isinstance(value, str):
      vsh = str(value)
      vsh = vsh.replace('\'','')
      vsh = vsh.replace('[','')
      vsh = vsh.replace(']','')
      vsh = vsh.replace(',',' ')
      return ['set '+var+' = ('+vsh+')\n']
    else:
      return ['setenv '+var+' "'+str(value)+'"\n']

  def exportVarsToCsh(self, variables):
    if len(variables) == 0: return
    Str = ['''#!/bin/csh -f
######################################################
# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY.
# MODIFY THE SCENARIO YAML FILE INSTEAD.
######################################################

if ( $?config_'''+self.baseKey+''' ) exit 0
set config_'''+self.baseKey+''' = 1

''']
    for v in variables:
      Str += self.varToCsh(v, self._vtable[v])
    self.write('config/auto/'+self.baseKey+'.csh', Str)

  # cylc variables
  @staticmethod
  def varToCylc(var, value):
    if isinstance(value, str):
      return ['{% set '+var+' = "'+value+'" %}\n']
    else:
      return ['{% set '+var+' = '+str(value)+' %}\n']

  def exportVarsToCylc(self, variables):
    if len(variables) == 0: return
    Str = []
    for v in variables:
      Str += self.varToCylc(v, self._vtable[v])
    self.write('include/variables/auto/'+self.baseKey+'.rc', Str)

  # cylc dependencies
  def exportDependencies(self, text):
    self.write('include/dependencies/auto/'+self.baseKey+'.rc', text)

  # cylc tasks
  def exportTasks(self, text):
    self.write('include/tasks/auto/'+self.baseKey+'.rc', text)
