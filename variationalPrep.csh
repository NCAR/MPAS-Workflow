#!/bin/csh -f

#TODO: move this script functionality and relevent control's to python + maybe yaml

# Perform preparation for the variational application
# + iterations
# + ensemble Jb term
# + TODO: static Jb term

date

# Process arguments
# =================
## args
# ArgMember: int, ensemble member [>= 1]
# note: not currently used, but will be for independent EDA members
set ArgMember = "$1"

## arg checks
set test = `echo $ArgMember | grep '^[0-9]*$'`
set isNotInt = ($status)
if ( $isNotInt ) then
  echo "ERROR in $0 : ArgMember ($ArgMember) must be an integer" > ./FAIL
  exit 1
endif
if ( $ArgMember < 1 ) then
  echo "ERROR in $0 : ArgMember ($ArgMember) must be > 0" > ./FAIL
  exit 1
endif

# Setup environment
# =================
source config/experiment.csh
source config/filestructure.csh
source config/tools.csh
source config/modeldata.csh
set yymmdd = `echo ${CYLC_TASK_CYCLE_POINT} | cut -c 1-8`
set hh = `echo ${CYLC_TASK_CYCLE_POINT} | cut -c 10-11`
set thisCycleDate = ${yymmdd}${hh}
set thisValidDate = ${thisCycleDate}
source ./getCycleVars.csh

# static work directory
set self_WorkDir = $CyclingDADirs[1]
echo "WorkDir = ${self_WorkDir}"
cd ${self_WorkDir}

# other static variables
set self_WindowHR = ${CyclingWindowHR}
set self_AppName = ${DAType}

# ==================================================================================================

# Previous time info for yaml entries
# ===================================
set prevValidDate = `$advanceCYMDH ${thisValidDate} -${self_WindowHR}`

# Rename appyaml generated by another preparation script
# ======================================================
rm prevPrep.yaml
mv $appyaml prevPrep.yaml
set prevYAML = prevPrep.yaml

# Add outer iterations configuration elements
# ===========================================
# performs sed substitution for VariationalIterations
set iterationssed = VariationalIterations
set thisSEDF = ${iterationssed}SEDF.yaml
cat >! ${thisSEDF} << EOF
/${iterationssed}/c\
EOF

set nIterationsIndent = 2
set indent = "`${nSpaces} $nIterationsIndent`"
set iOuter = 0
foreach nInner ($nInnerIterations)
  @ iOuter++
  set nn = ${nInner}
cat >>! ${thisSEDF} << EOF
${indent}- <<: *iterationConfig\
EOF

  if ( $iOuter == 1 ) then
cat >>! ${thisSEDF} << EOF
${indent}  diagnostics:\
${indent}    departures: depbg\
EOF

  endif
  if ( $iOuter < $nOuterIterations ) then
    set nn = $nn\\
  endif
cat >>! ${thisSEDF} << EOF
${indent}  ninner: ${nn}
EOF

end

set thisYAML = insertIterations.yaml
sed -f ${thisSEDF} $prevYAML >! $thisYAML
rm ${thisSEDF}
set prevYAML = $thisYAML



# Ensemble Jb components
# ======================

## ensemble Jb yaml indentation
if ( "$self_AppName" =~ *"envar"* ) then
  set nEnsPbIndent = 4
else if ( "$self_AppName" =~ *"hybrid"* ) then
  set nEnsPbIndent = 8
else
  set nEnsPbIndent = 0
endif
set indentPb = "`${nSpaces} $nEnsPbIndent`"

## ensemble Jb localization
sed -i 's@bumpLocDir@'${bumpLocDir}'@g' $prevYAML
sed -i 's@bumpLocPrefix@'${bumpLocPrefix}'@g' $prevYAML

## ensemble Jb inflation
# performs sed substitution for EnsemblePbInflation
set enspbinfsed = EnsemblePbInflation
set thisSEDF = ${enspbinfsed}SEDF.yaml
set removeInflation = 0
if ( "$self_AppName" =~ *"eda"* && ${ABEInflation} == True ) then
  set inflationFields = ${CyclingABEInflationDir}/BT${ABEIChannel}_ABEIlambda.nc
  find ${inflationFields} -mindepth 0 -maxdepth 0
  if ($? > 0) then
    ## inflation file not generated because all instruments (abi, ahi?) missing at this cylce date
    #TODO: use last valid inflation factors?
    set removeInflation = 1
  else
    set thisYAML = insertInflation.yaml
#NOTE: 'stream name: control' allows for spechum and temperature inflation values to be read
#      read directly from inflationFields without a variable transform. Also requires spechum and
#      temperature to be in stream_list.atmosphere.control.

cat >! ${thisSEDF} << EOF
/${enspbinfsed}/c\
${indentPb}inflation field:\
${indentPb}  date: *analysisDate\
${indentPb}  filename: ${inflationFields}\
${indentPb}  stream name: control
EOF

    sed -f ${thisSEDF} $prevYAML >! $thisYAML
    set prevYAML = $thisYAML
  endif
else
  set removeInflation = 1
endif
if ($removeInflation > 0) then
  # delete the line containing $enspbinfsed
  sed -i '/^'${enspbinfsed}'/d' $prevYAML
endif

## ensemble Jb members
# performs sed substitution for EnsemblePbMembers
set enspbmemsed = EnsemblePbMembers
set thisSEDF = ${enspbmemsed}SEDF.yaml
if ( "$self_AppName" =~ *"eda"* ) then
  # for ensemble of variational applications (EDA)
  echo "files:" > $appyaml

  set member = 1
  while ( $member <= ${nEnsDAMembers} )
    set memberyaml = member_$member.yaml

    # add eda-member yaml name to list of member yamls
    echo "  - $memberyaml" >> $appyaml

    # create eda-member-specific yaml
    cp $prevYAML $memberyaml

    ## ensemble Jb members
cat >! ${thisSEDF} << EOF
/${enspbmemsed}/c\
EOF

    # TODO(JJG): how does ensemble B config generation need to be
    #            modified for 4DEnVar?
    set bmember = 0
    set bremain = ${ensPbNMembers}
    if ( $LeaveOneOutEDA == True ) then
      @ bremain--
    endif

    while ( $bmember < ${ensPbNMembers} )
      @ bmember++
      if ( $bmember == $member && $LeaveOneOutEDA == True ) then
        continue
      endif
      set memDir = `${memberDir} ensemble $bmember "${ensPbMemFmt}"`
      set filename = ${ensPbDir}/${prevValidDate}${memDir}/${ensPbFilePrefix}.${fileDate}.nc
      if ( $bremain > 1 ) then
        set filename = ${filename}\\
      endif

cat >>! ${thisSEDF} << EOF
${indentPb}- <<: *memberConfig\
${indentPb}  filename: ${filename}
EOF

      @ bremain--
    end
    set thisYAML = last.yaml
    sed -f ${thisSEDF} $memberyaml >! $thisYAML
    rm ${thisSEDF}
    cp $thisYAML $memberyaml

    ## Jo term
    set memDir = `${memberDir} $self_AppName $member`
    sed -i 's@OOPSMemberDir@'${memDir}'@g' $memberyaml
    if ($member == 1) then
      sed -i 's@ObsPerturbations@false@g' $memberyaml
    else
      sed -i 's@ObsPerturbations@true@g' $memberyaml
    endif
    sed -i 's@MemberSeed@'$member'@g' $memberyaml

    @ member++
  end
else
  # for single-background variational application (not EDA)
  # create deterministic "member" yaml
  set memberyaml = $appyaml
  cp $prevYAML $memberyaml

  ## ensemble Jb members
cat >! ${thisSEDF} << EOF
/${enspbmemsed}/c\
EOF

  # TODO(JJG): how does ensemble B config generation need to be
  #            modified for 4DEnVar?
  set bmember = 0
  while ( $bmember < ${ensPbNMembers} )
    @ bmember++
    set memDir = `${memberDir} ensemble $bmember "${ensPbMemFmt}"`
    set filename = ${ensPbDir}/${prevValidDate}${memDir}/${ensPbFilePrefix}.${fileDate}.nc
    if ( $bmember < ${ensPbNMembers} ) then
      set filename = ${filename}\\
    endif

cat >>! ${thisSEDF} << EOF
${indentPb}- <<: *memberConfig\
${indentPb}  filename: ${filename}
EOF

  end
  set thisYAML = last.yaml
  sed -f ${thisSEDF} $memberyaml >! $thisYAML
  rm ${thisSEDF}
  cp $thisYAML $memberyaml

  ## Jo term
  sed -i 's@OOPSMemberDir@@g' $memberyaml
  sed -i 's@ObsPerturbations@false@g' $memberyaml
  sed -i 's@MemberSeed@1@g' $memberyaml
endif

exit 0
