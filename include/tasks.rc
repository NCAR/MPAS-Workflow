## All-task defaults
  [[root]]
    pre-script = "cd  $origin/"
    [[[environment]]]
      origin = {{mainScriptDir}}

## Default settings for batch-submitted tasks
  [[BATCH]]
    # load conda + activate npl
    init-script = '''
source /etc/profile.d/modules.sh
module load conda/latest
conda activate npl
'''
    # default job
    [[[job]]]
      batch system = pbs
      execution time limit = PT60M

    # default directives, to be overridden by individual tasks
    [[[directives]]]
      -j = oe
      -k = eod
      -S = /bin/tcsh
      -q = {{SingleProcQueueName}}
      -A = {{SingleProcAccountNumber}}
      -l = select=1:ncpus=1

## Base
  [[ForecastBase]]
    [[[job]]]
      execution time limit = PT{{CyclingFCSeconds}}S
    [[[directives]]]
      -m = ae
      -q = {{CPQueueName}}
      -A = {{CPAccountNumber}}
      -l = select={{CyclingFCNodes}}:ncpus={{CyclingFCPEPerNode}}:mpiprocs={{CyclingFCPEPerNode}}
  [[ExtendedForecast]]
  [[ExtendedFCBase]]
    inherit = ExtendedForecast
    [[[job]]]
      execution time limit = PT{{ExtendedFCSeconds}}S
    [[[directives]]]
      -m = ae
      -q = {{NCPQueueName}}
      -A = {{NCPAccountNumber}}
      -l = select={{ExtendedFCNodes}}:ncpus={{ExtendedFCPEPerNode}}:mpiprocs={{ExtendedFCPEPerNode}}
  [[HofXBase]]
    [[[job]]]
      execution time limit = PT{{HofXSeconds}}S
      execution retry delays = {{HofXRetry}}
    [[[directives]]]
      -q = {{NCPQueueName}}
      -A = {{NCPAccountNumber}}
      -l = select={{HofXNodes}}:ncpus={{HofXPEPerNode}}:mpiprocs={{HofXPEPerNode}}:mem={{HofXMemory}}GB
  [[VerifyModelBase]]
    [[[job]]]
      execution time limit = PT{{VerifyModelSeconds}}S
      execution retry delays = {{VerifyModelRetry}}
    [[[directives]]]
      -q = {{NCPQueueName}}
      -A = {{NCPAccountNumber}}
      -l = select=1:ncpus=36:mpiprocs=36
  [[VerifyObsBase]]
    [[[job]]]
      execution time limit = PT{{VerifyObsSeconds}}S
      execution retry delays = {{VerifyObsRetry}}
    [[[directives]]]
      -q = {{NCPQueueName}}
      -A = {{NCPAccountNumber}}
      -l = select=1:ncpus=36:mpiprocs=36
  [[CompareBase]]
    [[[job]]]
      execution time limit = PT5M
    [[[directives]]]
      -q = {{NCPQueueName}}
      -A = {{NCPAccountNumber}}
      -l = select=1:ncpus=36:mpiprocs=36
  [[CleanBase]]
    [[[job]]]
      execution time limit = PT5M
      execution retry delays = {{CleanRetry}}

## Null parent or child
  [[Null]]

## Observations
  [[Observations]]
{% for dt in ExtendedFCLengths %}
  [[GetObs-{{dt}}hr]]
    inherit = Observations, BATCH
    script = $origin/GetObs.csh "{{dt}}"
    [[[job]]]
      execution time limit = PT10M
      execution retry delays = {{GetObsRetry}}
  [[ObsToIODA-{{dt}}hr]]
    inherit = Observations, BATCH
    script = $origin/ObsToIODA.csh "{{dt}}"
    [[[job]]]
      execution time limit = PT10M
      execution retry delays = {{InitializationRetry}}
    # currently ObsToIODA has to be on Cheyenne, because ioda-upgrade.x is built there
    # TODO: build ioda-upgrade.x on casper, remove CP directives below
    # Note: memory for ObsToIODA may need to be increased when hyperspectral and/or
    #       geostationary instruments are added
    [[[directives]]]
      -m = ae
      -q = {{CPQueueName}}
      -A = {{CPAccountNumber}}
      -l = select=1:ncpus=1:mem=10GB
  [[ObsReady-{{dt}}hr]]
    inherit = Observations
{% endfor %}
  [[GetObs]]
    inherit = GetObs-0hr
  [[ObsToIODA]]
    inherit = ObsToIODA-0hr
  [[ObsReady]]
    inherit = Observations


## Data assimilation and supporting tasks (critical path)
  # Pre => (Ens)DataAssim => Post => Finished => Clean
  [[PreDataAssim]]
  [[DataAssimPost]]
  [[DataAssimFinished]]

  # directory/file preparation
  [[InitDataAssim]]
    inherit = BATCH
    env-script = cd {{mainScriptDir}}; ./PrepJEDIVariational.csh "1" "0" "DA" "variational"
    script = $origin/PrepVariational.csh "1"
    [[[job]]]
      execution time limit = PT20M
      execution retry delays = {{VariationalRetry}}
  # single instance or ensemble of EDA(s)
  [[EnsDataAssim]]
    inherit = BATCH
  {% for inst in DAInstances %}
  [[EDAInstance{{inst}}]]
    inherit = EnsDataAssim
    script = $origin/EnsembleOfVariational.csh "{{inst}}"
    [[[job]]]
      execution time limit = PT{{EnsOfVariationalSeconds}}S
      execution retry delays = {{EnsOfVariationalRetry}}
    [[[directives]]]
      -m = ae
      -q = {{CPQueueName}}
      -A = {{CPAccountNumber}}
      -l = select={{EnsOfVariationalNodes}}:ncpus={{EnsOfVariationalPEPerNode}}:mpiprocs={{EnsOfVariationalPEPerNode}}:mem={{EnsOfVariationalMemory}}GB
  {% endfor %}
  # single instance or ensemble of Variational(s)
  [[DataAssim]]
    inherit = BATCH
  {% for mem in allMembers %}
  [[DAMember{{mem}}]]
    inherit = DataAssim
    script = $origin/Variational.csh "{{mem}}"
    [[[job]]]
      execution time limit = PT{{VariationalSeconds}}S
      execution retry delays = {{VariationalRetry}}
    [[[directives]]]
      -m = ae
      -q = {{CPQueueName}}
      -A = {{CPAccountNumber}}
      -l = select={{VariationalNodes}}:ncpus={{VariationalPEPerNode}}:mpiprocs={{VariationalPEPerNode}}:mem={{VariationalMemory}}GB
  {% endfor %}
  [[CleanVariational]]
    inherit = CleanBase, BATCH
    script = $origin/CleanVariational.csh

  # inflation (pre and post)
  [[GenerateABEInflation]]
    inherit = BATCH
    script = $origin/GenerateABEInflation.csh
    [[[job]]]
      execution time limit = PT20M
    [[[directives]]]
      -q = {{CPQueueName}}
      -A = {{CPAccountNumber}}
      -l = select=1:ncpus=36:mpiprocs=36
  [[PrepRTPP]]
    inherit = BATCH
    script = $origin/PrepRTPP.csh
    [[[job]]]
      execution time limit = PT1M
      execution retry delays = {{RTPPRetry}}
  [[RTPP]]
    inherit = BATCH
    script = $origin/RTPP.csh
    [[[job]]]
      execution time limit = PT{{RTPPSeconds}}S
      execution retry delays = {{RTPPRetry}}
    [[[directives]]]
      -m = ae
      -q = {{CPQueueName}}
      -A = {{CPAccountNumber}}
      -l = select={{RTPPNodes}}:ncpus={{RTPPPEPerNode}}:mpiprocs={{RTPPPEPerNode}}:mem={{RTPPMemory}}GB
  [[CleanRTPP]]
    inherit = CleanBase, BATCH
    script = $origin/CleanRTPP.csh

  # verification
  [[VerifyObsDA]]
    inherit = VerifyObsBase, BATCH
    script = $origin/VerifyObsDA.csh "1" "0" "DA" "0" "variational"
  [[CompareObsDA]]
    inherit = CompareBase, BATCH
    script = $origin/CompareObsDA.csh "1" "0" "DA" "variational"

## Forecast (critical path)
  [[Forecast]]
    inherit = ForecastBase
{% for mem in allMembers %}
  [[ForecastMember{{mem}}]]
    inherit = Forecast, BATCH
    script = $origin/Forecast.csh "{{mem}}" "{{FCOutIntervalHR}}" "{{FCLengthHR}}" "{{forecastIAU}}" "{{outerMesh}}"
    [[[job]]]
      execution retry delays = {{CyclingFCRetry}}
{% endfor %}
  [[ForecastFinished]]


## Forecasts and analyses generated outside MPAS-Workflow
  [[LinkWarmStartBackgrounds]]
    inherit = BATCH
    script = $origin/LinkWarmStartBackgrounds.csh
    [[[job]]]
      # give longer for higher resolution and more EDA members
      # TODO: set time limit based on outerMesh AND (number of members OR
      #       independent task for each member)
      execution time limit = PT10M
      execution retry delays = {{InitializationRetry}}

  # external analyses
  [[ExternalAnalyses]]
{% for dt in ExtendedFCLengths %}
  [[GetGFSAnalysisFromRDA-{{dt}}hr]]
    inherit = ExternalAnalyses, BATCH
    script = $origin/GetGFSAnalysisFromRDA.csh "{{dt}}"
    [[[job]]]
      execution time limit = PT20M
      execution retry delays = {{GFSAnalysisRetry}}
  [[GetGFSAnalysisFromFTP-{{dt}}hr]]
    inherit = ExternalAnalyses, BATCH
    script = $origin/GetGFSAnalysisFromFTP.csh "{{dt}}"
    [[[job]]]
      execution time limit = PT20M
      execution retry delays = {{GFSAnalysisRetry}}
  [[UngribExternalAnalysis-{{dt}}hr]]
    inherit = ExternalAnalyses, BATCH
    script = $origin/UngribExternalAnalysis.csh "{{dt}}"
    [[[job]]]
      execution time limit = PT5M
      execution retry delays = {{InitializationRetry}}
    # currently UngribExternalAnalysis has to be on Cheyenne, because ungrib.exe is built there
    # TODO: build ungrib.exe on casper, remove CP directives below
    [[[directives]]]
      -q = {{CPQueueName}}
      -A = {{CPAccountNumber}}
  {% for mesh in allMeshes %}
  [[LinkExternalAnalysis-{{mesh}}-{{dt}}hr]]
    inherit = ExternalAnalyses, BATCH
    script = $origin/LinkExternalAnalysis.csh "{{mesh}}" "{{dt}}"
    [[[job]]]
      execution retry delays = 10*PT15S
      execution time limit = PT60S
  [[ExternalAnalysisToMPAS-{{mesh}}-{{dt}}hr]]
    inherit = ExternalAnalyses, BATCH
    script = $origin/ExternalAnalysisToMPAS.csh "{{mesh}}" "{{dt}}"
    [[[job]]]
      execution time limit = PT{{InitICSeconds}}S
      execution retry delays = {{InitializationRetry}}
    [[[directives]]]
      -q = {{CPQueueName}}
      -A = {{CPAccountNumber}}
      -l = select={{InitICNodes}}:ncpus={{InitICPEPerNode}}:mpiprocs={{InitICPEPerNode}}
  {% endfor %}
  [[ExternalAnalysisReady-{{dt}}hr]]
    inherit = ExternalAnalyses
{% endfor %}

  [[GetGFSAnalysisFromRDA]]
    inherit = GetGFSAnalysisFromRDA-0hr
  [[GetGFSAnalysisFromFTP]]
    inherit = GetGFSAnalysisFromFTP-0hr
  [[UngribExternalAnalysis]]
    inherit = UngribExternalAnalysis-0hr
{% for mesh in allMeshes %}
  [[LinkExternalAnalysis-{{mesh}}]]
    inherit = LinkExternalAnalysis-{{mesh}}-0hr
  [[ExternalAnalysisToMPAS-{{mesh}}]]
    inherit = ExternalAnalysisToMPAS-{{mesh}}-0hr
{% endfor %}
  [[ExternalAnalysisReady]]
    inherit = ExternalAnalyses

  [[GetGDASanalysis]]
    inherit = ExternalAnalyses, BATCH
    script = $origin/GetGDASanalysis.csh
    [[[job]]]
      execution time limit = PT45M
      execution retry delays = {{GFSAnalysisRetry}}


## Verification: extended forecast from mean analysis (including single-member deterministic)
  [[ExtendedForecastFinished]]
    inherit = ExtendedForecast
  [[MeanAnalysis]]
    inherit = ExtendedForecast, BATCH
    script = $origin/MeanAnalysis.csh
    [[[job]]]
      execution time limit = PT5M
    [[[directives]]]
      -m = ae
      -q = {{NCPQueueName}}
      -A = {{NCPAccountNumber}}
      -l = select=1:ncpus=36:mpiprocs=36
  [[ExtendedMeanFC]]
    inherit = ExtendedFCBase, BATCH
    script = $origin/ExtendedMeanFC.csh "1" "{{ExtendedFCOutIntervalHR}}" "{{ExtendedFCLengthHR}}" "False" "{{outerMesh}}"
{% for dt in ExtendedFCLengths %}
  [[HofXMeanFC{{dt}}hr]]
    inherit = HofXBase, BATCH
    env-script = cd {{mainScriptDir}}; ./PrepJEDIHofXMeanFC.csh "1" "{{dt}}" "FC" "hofx"
    script = $origin/HofXMeanFC.csh "1" "{{dt}}" "FC"
  [[VerifyObsMeanFC{{dt}}hr]]
    inherit = VerifyObsBase, BATCH
    script = $origin/VerifyObsMeanFC.csh "1" "{{dt}}" "FC" "0" "hofx"
  [[VerifyModelMeanFC{{dt}}hr]]
    inherit = VerifyModelBase, BATCH
    script = $origin/VerifyModelMeanFC.csh "1" "{{dt}}" "FC" "0"
  [[CleanHofXMeanFC{{dt}}hr]]
    inherit = CleanBase, BATCH
    script = $origin/CleanHofXMeanFC.csh "1" "{{dt}}" "FC"
{% endfor %}


## Verification: ensemble mean background
  [[MeanBackground]]
    inherit = BATCH
    script = $origin/MeanBackground.csh
    [[[job]]]
      execution time limit = PT5M
    [[[directives]]]
      -m = ae
      -q = {{NCPQueueName}}
      -A = {{NCPAccountNumber}}
      -l = select=1:ncpus=36:mpiprocs=36
  [[HofXEnsMeanBG]]
    inherit = HofXBase, BATCH
    env-script = cd {{mainScriptDir}}; ./PrepJEDIHofXEnsMeanBG.csh "1" "0" "BG" "hofx"
    script = $origin/HofXEnsMeanBG.csh "1" "0" "BG"
    [[[directives]]]
      -q = {{EnsMeanBGQueueName}}
      -A = {{EnsMeanBGAccountNumber}}
{% if DiagnoseEnsSpreadBG %}
  {% set nEnsSpreadMem = nMembers %}
  {% set modelSeconds = VerifyModelEnsMeanSeconds %}
  {% set obsSeconds = VerifyObsEnsMeanSeconds %}
{% else %}
  {% set nEnsSpreadMem = 0 %}
  {% set modelSeconds = VerifyModelSeconds %}
  {% set obsSeconds = VerifyObsSeconds %}
{% endif %}
  [[VerifyModelEnsMeanBG]]
    inherit = VerifyModelBase, BATCH
    script = $origin/VerifyModelEnsMeanBG.csh "1" "0" "BG" "{{nEnsSpreadMem}}"
    [[[job]]]
      execution time limit = PT{{modelSeconds}}S
  [[VerifyObsEnsMeanBG]]
    inherit = VerifyObsBase, BATCH
    script = $origin/VerifyObsEnsMeanBG.csh "1" "0" "BG" "{{nEnsSpreadMem}}" "hofx"
    [[[job]]]
      execution time limit = PT{{obsSeconds}}S
  [[CleanHofXEnsMeanBG]]
    inherit = CleanBase, BATCH
    script = $origin/CleanHofXEnsMeanBG.csh "1" "0" "BG"


## Verification: various kinds of ensembles
{% for state in ['BG', 'AN']%}
  [[HofX{{state}}]]
    inherit = HofXBase, BATCH
  [[VerifyModel{{state}}]]
    inherit = VerifyModelBase, BATCH
  [[CompareModel{{state}}]]
    inherit = CompareBase, BATCH
  [[VerifyObs{{state}}]]
    inherit = VerifyObsBase, BATCH
  [[CompareObs{{state}}]]
    inherit = CompareBase, BATCH
  [[CleanHofX{{state}}]]
    inherit = CleanBase, BATCH
{% endfor %}

{% for mem in EnsVerifyMembers %}
  # ensemble of backgrounds and analyses (including single-member deterministic)
  {% for state in ['BG', 'AN']%}
  [[HofX{{state}}{{mem}}]]
    inherit = HofX{{state}}
    env-script = cd {{mainScriptDir}}; ./PrepJEDIHofX{{state}}.csh "{{mem}}" "0" "{{state}}" "hofx"
    script = $origin/HofX{{state}}.csh "{{mem}}" "0" "{{state}}"
  [[VerifyModel{{state}}{{mem}}]]
    inherit = VerifyModel{{state}}
    script = $origin/VerifyModel{{state}}.csh "{{mem}}" "0" "{{state}}" "0"
  [[CompareModel{{state}}{{mem}}]]
    inherit = CompareModel{{state}}
    script = $origin/CompareModel{{state}}.csh "{{mem}}" "0" "{{state}}"
  [[VerifyObs{{state}}{{mem}}]]
    inherit = VerifyObs{{state}}
    script = $origin/VerifyObs{{state}}.csh "{{mem}}" "0" "{{state}}" "0" "hofx"
  [[CompareObs{{state}}{{mem}}]]
    inherit = CompareObs{{state}}
    script = $origin/CompareObs{{state}}.csh "{{mem}}" "0" "{{state}}" "hofx"
  [[CleanHofX{{state}}{{mem}}]]
    inherit = CleanHofX{{state}}
    script = $origin/CleanHofX{{state}}.csh "{{mem}}" "0" "{{state}}"
  {% endfor %}
{% endfor %}

  # ensemble of extended forecasts from ensemble of analyses
  [[ExtendedEnsFC]]
    inherit = ExtendedFCBase, BATCH
{% for mem in EnsVerifyMembers %}
  [[ExtendedFC{{mem}}]]
    inherit = ExtendedEnsFC
    script = $origin/ExtendedEnsFC.csh "{{mem}}" "{{ExtendedFCOutIntervalHR}}" "{{ExtendedFCLengthHR}}" "False" "{{outerMesh}}"
  {% for dt in ExtendedFCLengths %}
  [[HofXEnsFC{{mem}}-{{dt}}hr]]
    inherit = HofXBase, BATCH
    env-script = cd {{mainScriptDir}}; ./PrepJEDIHofXEnsFC.csh "{{mem}}" "{{dt}}" "FC" "hofx"
    script = $origin/HofXEnsFC.csh "{{mem}}" "{{dt}}" "FC"
  [[VerifyModelEnsFC{{mem}}-{{dt}}hr]]
    inherit = VerifyModelBase, BATCH
    script = $origin/VerifyModelEnsFC.csh "{{mem}}" "{{dt}}" "FC" "0"
  [[VerifyObsEnsFC{{mem}}-{{dt}}hr]]
    inherit = VerifyObsBase, BATCH
    script = $origin/VerifyObsEnsFC.csh "{{mem}}" "{{dt}}" "FC" "0" "hofx"
  [[CleanHofXEnsFC{{mem}}-{{dt}}hr]]
    inherit = CleanBase, BATCH
    script = $origin/CleanHofXEnsFC.csh "{{mem}}" "{{dt}}" "FC"
  {% endfor %}
{% endfor %}
