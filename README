
MPAS-Workflow
=============

A tool for cycling forecast and data assimilation experiments with the MPAS-Atmosphere model and the
MPAS-JEDI data assimilation package.

## starting a cycling experiment on the Cheyenne HPC
----------------------------------------------------
login to Cheyenne

mkdir -p /fresh/path/for/submitting/experiments

cd /fresh/path/for/submitting/experiments

module load git

git clone https://https://github.com/jjguerrette/MPAS-Workflow

modify configuration files as needed

source env-setup/cheyenne

./drive.csh

# It is required to set the work/run directories in ~/.cylc/global.rc as follows:
[hosts]
    [[localhost]]
        work directory = /glade/scratch/USERNAME/cylc-run
        run directory = /glade/scratch/USERNAME/cylc-run
        [[[batch systems]]]
            [[[[pbs]]]]
                job name length maximum = 236

# It is recommended to also set 'job name length maximum'

## top-level configuration (config/*.csh)
-----------------------------------------

appindex.csh: controls re-usable templating for variational and hofx applications

builds.csh: compiled code build directories

modeldata.csh: static model-space data file structure, including mesh-specific partition files,
fixed ensemble forecast members for deterministic experiments, first guess files for the first cycle
of an experiment, surface variable update files (sst and xice), and common static.nc file(s) to be
used across all cycles.

environment.csh: common executable run-time environment

experiment.csh: controls for independent experiments

filestructure.csh: workflow file structure

job.csh: job queue settings

obsdata.csh: static observation-space data file structure

tools.csh: initializes python tools for workflow task management

verification.csh: post-processing and verification tool settings


## MPAS-specific configuration
------------------------------
variables.csh: model/analysis variables relevant to the workflow

$MPASGridDescriptor/mesh.csh: workflow-relevant mesh-related options

$MPASGridDescriptor/job.csh: job durations and processor usages


## main driver: drive.csh
-------------------------
creates a new cylc suite, then runs it. There are options at the top of this file for begin/end
dates and various kinds of workflows with and without verification. The CriticalPathType determines
whether the verification is performed concurrently, and depending on the critical path (Normal), or
as a post-processing diagnostic step (Bypass). The Reanalysis or Reforecast settings are useful for
running verification on existing sets of background or initial condition states, respectively.


## templated workflow components
--------------------------------
These scripts serve as templates for multiple workflow components. The actual components are
generated by performing sed substitution within SetupWorkflow.csh and AppAndVerify.csh. Here we give
a brief summary of the templating for each script.

jediPrep.csh: substitutes relevent sections in the yaml file for all MPAS-JEDI applications.
Templated w.r.t. the application type (e.g., variational, hofx) and application name (e.g.,
3denvar).

variational.csh: used to generate CyclingDA.csh, which executes the mpasjedi_variational and
mpasjedi_eda applications.  Templated w.r.t. the background state prefix and directory. Presently
only reads output states from a CyclingFC task, as coded in SetupWorkflow.csh.

clean-variational.csh: used to generate CleanCyclingDA.csh, which cleans CyclingDA directories in
order to reduce experiment disk resource requirements.

forecast.csh: used to generate all forecast scripts, e.g., CyclingFC.csh and ExtendedMeanFC.csh,
which perform mpas_atmosphere forecasts across a templated time range with state output at a
templated interval. Presently only takes analyses as initial conditions, which have the
ANFilePrefix and are produced by either CyclingDA or RTPPInflation.  self_icStatePrefix could be
templated in order enable forecasts from other kinds of states, like cold-start files.

hofx.csh: used to generate all HofX* (observation-minus-model) scripts, e.g., HofXBG.csh,
HofXMeanFC.csh, HofXEnsMeanBG.csh, which run the mpasjedi_hofx_nomodel application. Templated w.r.t.
the input state directory and prefix, allowing it to read any "da_state"-compatible model state.

clean-hofx.csh: used to generate CleanHofX*.csh scripts, which clean HofX* directories
in order to reduce experiment disk resource requirements.

verifyobs.csh: used to generate scripts that verify observation-database output from hofx jobs.

verifymodel.csh: used to generate scripts that verify model states with respect to GFS analyses.


## non-templated workflow components
------------------------------------
These scripts are used as-is without sed substitution.

MeanBackground.csh: calculates the mean of ensemble background states

MeanAnalysis.csh: calculates the mean of ensemble analysis states

RTPPInflation.csh: performs Relaxation To Prior Perturbation (RTPP) inflation
for an ensemble of analysis states.

GenerateABEInflation.csh: generates Adaptiave Background Error Inflation (ABEI) factors, based on
all-sky IR brightness temperature H(x_mean) and H_clear(x_mean).


## MPAS-JEDI application configuration files
--------------------------------------------
config/applicationBase/*.yaml: MPAS-JEDI application-specific templates

config/ObsPlugs/variational/*.yaml: observation yaml stubs that get plugged into all variational
applications, e.g., 3denvar and eda_3denvar

config/ObsPlugs/hofx/*.yaml: same, but for hofx


## application-specific MPAS-Atmosphere configuration files
-----------------------------------------------------------
e.g., namelist.atmosphere, streams.atmosphere, and stream_list.atmosphere.*

config/mpas/forecast/*: *FC (forecast) tasks
config/mpas/hofx/*: HofX* task
config/mpas/rtpp/*: RTPPInflation task
config/mpas/variational/*: CyclingDA task
config/mpas/variational-bginflate/*: CyclingDA task with background ensemble spread inflation


## python tools that perform aspects of the workflow
----------------------------------------------------
tools/advanceCYMDH.py: time-stepping used to figure out dates relative to an arbitrary input date

tools/memberDir.py: generates an ensemble member directory string, dependent on experiment- and
application-specific inputs

tools/nSpaces.py: generates a string containing the number of spaces that are input. Used for
controlling indentation of some yaml components


## some useful cylc commands
----------------------------
# Print a list of active suites

cylc scan

# Open an X-window GUI showing the status of all active suites. Double-click an individual suite in
order to see detailed information. From there it is easy to perform actions on the entire suite or
individual tasks, e.g., hold, resume, kill, trigger.

cylc gscan

# Trigger all tasks in a suite with a particular STATUS.  Examples: failed, submit-failed

cylc trigger SUITENAME '*.*:STATUS'


## a note about disk management
-------------------------------
This workflow includes automated deletion of some intermediate files.  That behavior can be modified
in scripts that look like clean-{{application}}.csh.  If data storage is still a problem, it is
recommended to remove the Cycling* directories of an experiment after all desired verification has
completed. The model- and observation-space statistical summary files are orders of magnitude
smaller than the full model states and instrument feedback files.
