How to start a cycling experiment on Cheyenne:
----------------------------------------------

login to Cheyenne

mkdir -p /fresh/path/for/submitting/experiments

cd /fresh/path/for/submitting/experiments

module load git

git clone https://https://github.com/jjguerrette/MPAS-Workflow

modify configuration files as needed

source env-setup/cheyenne

./drive.csh


## top-level configuration (config/*.csh)
-----------------------------------------
experiment.csh: experiment settings

data.csh: workflow settings

appindex.csh: controls re-usable templating for variational and hofx applications

job.csh: job queue settings

build.csh: compiled code build and run settings


## MPAS-specific configuration (config/mpas/*.csh)
--------------------------------------------------
variables.csh: model/analysis variables relevant to the workflow

120km-mesh.csh, 30km-mesh.csh, etc.: mesh-specific configuration relevant to the workflow

120km-job.csh, 30km-job.csh, etc.: mesh-specific job durations and processor usages


## main driver: drive.csh
-------------------------
creates a new cylc suite, then runs it. There are options at the top of this file for begin/end
dates and various kinds of workflows with and without verification. The CriticalPathType determines
whether the verification is performed concurrently, and depending on the critical path (Normal), or
as a post-processing diagnostic step (Bypass). The Reanalysis or Reforecast settings are useful for
running verification on existing sets of background or initial condition states, respectively.


## templated workflow components
--------------------------------
These scripts serve as templates for multiple workflow components. The actual components are
generated by performing sed substitution within SetupWorkflow.csh and AppAndVerify.csh

jediPrep.csh: substitutes relevent sections in the yaml file for all MPAS-JEDI applications

variational.csh: used to generate CyclingDA.csh, which executes the mpasjedi_variational and mpasjedi_eda applications.  Templated w.r.t. the background state prefix and directory. Presently only
reads output states from a CyclingFC task, as coded in SetupWorkflow.csh.

clean-variational.csh: used to generate CleanCyclingDA.csh, which cleans CyclingDA directories in
order to reduce experiment disk resource requirements

forecast.csh: used to generate all forecast scripts, e.g., CyclingFC.csh and ExtendedMeanFC.csh,
which perform mpas_atmosphere forecasts between a templated time range with state output at a
templated interval. Presently only takes analyses as initial conditions, which have the
ANFilePrefix and are produced by either CyclingDA or RTPPInflation. self_icStatePrefix could be
templated in order enable forecasts from other kinds of states.

hofx.csh: used to generate all HofX* (observation-minus-model) scripts, e.g., HofXBG.csh,
HofXMeanFC.csh, HofXEnsMeanBG.csh, which run the mpasjedi_hofx_nomodel application. Templated w.r.t.
the input state directory and prefix, allowing it to read any "da_state"-compatible model state.

clean-hofx.csh: used to generate CleanHofX*.csh scripts, which clean HofX* directories
in order to reduce experiment disk resource requirements

verifyobs.csh: used to generate scripts that verify observation-database output from hofx jobs

verifymodel.csh: used to generate scripts that verify model states with respect to GFS analyses


## non-templated workflow components
------------------------------------
These scripts are used as-is without sed substitution

MeanBackground.csh: calculates the mean of ensemble background states

MeanAnalysis.csh: calculates the mean of ensemble analysis states

RTPPInflation.csh: performs Relaxation To Prior Perturbation (RTPP) inflation
in an ensemble of analysis states

GenerateABEInflation.csh: generates Adaptiave Background Error Inflation (ABEI) factors, based on
all-sky IR brightness temperature H(x_mean) and H_clear(x_mean) 


## MPAS-JEDI application configuration files
--------------------------------------------
config/applicationBase/*.yaml: MPAS-JEDI application-specific templates

config/ObsPlugs/variational/*.yaml: observation yaml stubs that get plugged into all variational
applications, e.g., 3denvar and eda_3denvar

config/ObsPlugs/hofx/*.yaml: same, but for hofx


## Application-specific MPAS-Atmosphere configuration files
-----------------------------------------------------------
config/mpas/forecast/*: *FC
config/mpas/variational/*: CyclingDA
config/mpas/hofx/*: HofX*
config/mpas/rtpp/*: RTPPInflation

e.g., namelist.atmosphere, streams.atmosphere, and stream_list.atmosphere.*


## python tools that enable specific aspects of the workflow
------------------------------------------------------------
tools/advanceCYMDH.py: time-stepping used to figure out dates relative to a specific cycle date

tools/memberDir.py: generates a member directory string, dependent on experiment- and application-
specific inputs

tools/nSpaces.py: generates a string containing the number of spaces that are input. Used for
controlling indentation of some yaml components


## some useful cylc commands
----------------------------
# Print a list of active suites

cylc scan

# Open an X-window GUI showing the status of all active suites. Double-click an individual suite in
order to see detailed information. From there it is easy to perform actions on the entire suite or
individual tasks, e.g., hold, resume, kill, trigger.

cylc gscan

# Trigger all tasks in a suite with a particular STATUS.  Examples: failed, submit-failed

cylc trigger SUITENAME '*.*:STATUS'
